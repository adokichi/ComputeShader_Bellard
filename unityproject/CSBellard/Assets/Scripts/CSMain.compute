#pragma kernel Sglobal64mtg_192_Refresh
#pragma kernel SumGlobal
#pragma kernel Zeroset
//Read and Write
RWStructuredBuffer<uint2> A;
RWStructuredBuffer<uint2> B;
RWStructuredBuffer<uint2> bigSum;
StructuredBuffer<uint> ConstTable;
RWStructuredBuffer<uint2> dbg;

uint2 offset_mul_den0;
uint2 offset;
uint2 d;
uint2 k_max;
uint numesign;
uint den0;
uint den1;
uint gsize;



//(a1a0)*(b1b0)
//32bit*32bit=64bit
uint2 mymul64(uint2 a10, uint2 b10) {
	uint2 outhilo;
	//案1
	uint ab00 = a10.x * b10.x;
	uint ab11 = a10.y * b10.y;
	uint ab01 = a10.x * b10.y;
	uint ab10 = a10.y * b10.x;
	uint tmp = ab01 + ab10;
	if (tmp < ab01)ab11 += 65536;

	outhilo.x = ab00 + ((tmp &0x0000ffff) << 16);
	if (outhilo.x < ab00) {
		ab11++;
	}

	outhilo.y = ab11 + (tmp >> 16);
	return outhilo;
}



///////////////////////////////////uint2バージョン
uint4 u2mymul128(uint2 a, uint2 b) {
	uint a32 = a.y;
	uint a10 = a.x;
	uint b32 = b.y;
	uint b10 = b.x;
	uint2 u2a10, u2a32;
	u2a32.y = a32 >> 16;
	u2a32.x = a32 &0x0000ffff;
	u2a10.y = a10 >> 16;
	u2a10.x = a10 &0x0000ffff;

	uint2 u2b10, u2b32;
	u2b32.y = b32 >> 16;
	u2b32.x = b32 &0x0000ffff;
	u2b10.y = b10 >> 16;
	u2b10.x = b10 &0x0000ffff;

	uint C1, C0, C3, C2, C4, C5;
	uint plmflg = 0;//プラスマイナスフラグ

	uint2 u2out;
	u2out = mymul64(u2a10, u2b10);
	C1 = u2out.y;
	C0 = u2out.x;
	u2out = mymul64(u2a32, u2b32);
	C3 = u2out.y;
	C2 = u2out.x;

	if (a32 < a10) {
		a32 = a10 - a32;
		plmflg++;
	}
	else {
		a32 -= a10;
	}

	if (b32 < b10) {
		b32 = b10 - b32;
		plmflg++;
	}
	else {
		b32 -= b10;
	}

	uint2 u2ina; u2ina.y = a32>> 16; u2ina.x = a32 &0x0000ffff;
	uint2 u2inb; u2inb.y = b32>> 16; u2inb.x = b32 &0x0000ffff;
	u2out = mymul64(u2ina, u2inb);
	C5 = u2out.y;
	C4 = u2out.x;

	uint flg = 0;//下のほうで使う繰り上がりフラグ
	if (plmflg % 2 == 0) {//最後にC3から1引かないといけない
		C4 = ~C4;
		C5 = ~C5;
		C4 += 1;
		flg = (C4 == 0);
	}
	uint tmp;

	tmp = C4;
	C4 += C1;
	if (C4 < tmp)flg++;
	tmp = C4;

	C4 += C0;
	if (C4 < tmp)flg++;
	tmp = C4;

	C4 += C2;
	if (C4 < tmp)flg++;
	//tmp=C1;

	tmp = C5 + flg;
	flg = 0;
	if (tmp < C5)flg++;
	C5 = tmp;
	C5 += C2;
	if (C5 < tmp)flg++;
	tmp = C5;

	C5 += C1;
	if (C5 < tmp)flg++;
	tmp = C5;

	C5 += C3;
	if (C5 < tmp)flg++;
	//tmp=C5;

	C3 += flg;
	C3 -= (plmflg % 2 == 0);

	uint4 out4;
	out4.x = C0;
	out4.y = C4;
	out4.z = C5;
	out4.w = C3;


	return out4;
}


uint2 u2mymulhi128(uint2 a, uint2 b) {
	uint a32 = a.y;
	uint a10 = a.x;
	uint b32 = b.y;
	uint b10 = b.x;

	uint2 u2a10, u2a32;
	u2a32.y = a32>> 16;
	u2a32.x = a32 &0x0000ffff;
	u2a10.y = a10>> 16;
	u2a10.x = a10 &0x0000ffff;

	uint2 u2b10, u2b32;
	u2b32.y = b32>> 16;
	u2b32.x = b32 &0x0000ffff;
	u2b10.y = b10>> 16;
	u2b10.x = b10 &0x0000ffff;

	uint C1, C0, C3, C2, C4, C5;
	uint plmflg = 0;//プラスマイナスフラグ

	uint2 u2out;
	u2out = mymul64(u2a10, u2b10);
	C1 = u2out.y;
	C0 = u2out.x;
	u2out = mymul64(u2a32, u2b32);
	C3 = u2out.y;
	C2 = u2out.x;

	if (a32 < a10) {
		a32 = a10 - a32;
		plmflg++;
	}
	else {
		a32 -= a10;
	}

	if (b32 < b10) {
		b32 = b10 - b32;
		plmflg++;
	}
	else {
		b32 -= b10;
	}

	uint2 u2ina; u2ina.y = a32>> 16; u2ina.x = a32 &0x0000ffff;
	uint2 u2inb; u2inb.y = b32>> 16; u2inb.x = b32 &0x0000ffff;
	u2out = mymul64(u2ina, u2inb);
	C5 = u2out.y;
	C4 = u2out.x;

	uint flg = 0;//下のほうで使う繰り上がりフラグ
	if (plmflg % 2 == 0) {//最後にC3から1引かないといけない
		C4 = ~C4;
		C5 = ~C5;
		C4 += 1;
		flg = (C4 == 0);
	}

	uint tmp;

	tmp = C4;
	C4 += C1;
	if (C4 < tmp)flg++;
	tmp = C4;

	C4 += C0;
	if (C4 < tmp)flg++;
	tmp = C4;

	C4 += C2;
	if (C4 < tmp)flg++;
	//tmp=C1;

	tmp = C5 + flg;
	flg = 0;
	if (tmp < C5)flg++;
	C5 = tmp;
	C5 += C2;
	if (C5 < tmp)flg++;
	tmp = C5;

	C5 += C1;
	if (C5 < tmp)flg++;
	tmp = C5;

	C5 += C3;
	if (C5 < tmp)flg++;
	//tmp=C5;

	C3 += flg;
	C3 -= (plmflg % 2 == 0);
	uint2 out2;
	out2.x = C5;
	out2.y = C3;
	return out2;
}



uint2 u2mymullo128(uint2 a, uint2 b) {
	uint a32 = a.y;
	uint a10 = a.x;
	uint b32 = b.y;
	uint b10 = b.x;

	uint a1 = a10>> 16;
	uint a0 = a10 &0x0000ffff;

	uint b1 = b10>> 16;
	uint b0 = b10 &0x0000ffff;

	uint C1, C0;

	uint2 u2ina; u2ina.x = a0; u2ina.y = a1;
	uint2 u2inb; u2inb.x = b0; u2inb.y = b1;
	uint2 u2out = mymul64(u2ina, u2inb);
	C1 = u2out.y;
	C0 = u2out.x;
	//mymul64(a1,a0,b1,b0,&C1,&C0);
	C1 += a32 * b10 + a10 * b32;

	uint2 out2;
	out2.x = C0;
	out2.y = C1;
	return out2;
}

/* Right-shift that also handles the 64 case. */
uint2 u2shr(uint2 x, int n)
{
	uint2 outd;
	if (n >= 32) {
		outd.y = 0;
		outd.x = x.y >> (n - 32);
	}
	else {
		outd.y = x.y >> n;
		outd.x = (x.y % (1 << n)) << (32 - n);
		outd.x += x.x >> n;
	}
	return outd;
}
uint2 u2shl(uint2 x, int n)
{
	uint2 outd;
	if (n >= 32) {
		outd.x = 0;
		outd.y = x.x << (n - 32);
	}
	else {
		outd.x = x.x << n;
		outd.y = x.x >> (32 - n);
		outd.y += x.y << n;
	}
	return outd;
}







int clz2(uint2 x2)
{
	uint x;
	if (x2.y != 0) {
		x = x2.y;
	}
	else {
		x = x2.x;
	}

	int n = 16, nn = 8;
	for (; nn > 0; nn >>= 1)
	{
		if ((1 << n) <= x) {
			n += nn;
		}
		else {
			n -= nn;
		}
	}

	if ((1 << n) <= x) {
		n++;
	}


	if (x2.y != 0) {
		n += 32;
	}
	return 64 - n;
}



//単純な足し算、オーバーフロー考慮なし
uint2 uladd(uint2 a, uint2 b) {
	a.x += b.x;
	if (a.x < b.x)a.y++;
	a.y += b.y;
	return a;
}
//単純な引き算、オーバーフロー考慮なし
uint2 ulsub(uint2 a, uint2 b) {
	if (a.x < b.x)a.y--;
	a.x -= b.x;
	a.y -= b.y;
	return a;
}

//足し算、オーバーフロー考慮あり
uint3 uladdofw(uint2 a, uint2 b) {
	uint3 outd = 0;
	//outd.z = 0;
	outd.x = a.x + b.x;
	if (outd.x < b.x) {
		a.y++;
		if (a.y == 0)outd.z = 1;
	}
	a.y += b.y;
	outd.y = a.y;
	if (a.y < b.y)outd.z = 1;
	return outd;
}







//gt A is greater than B
bool gt(uint2 aa, uint2 bb) {
	bool flag = 0;
	if (aa.y > bb.y) {
		flag = 1;
	}
	else {
		if (aa.y == bb.y) {
			if (aa.x > bb.x)flag = 1;
		}
	}
	return flag;
}

//gt A is greater equal than B
bool ge(uint2 aa, uint2 bb) {
	bool flag = 0;
	if (aa.y > bb.y) {
		flag = 1;
	}
	else {
		if (aa.y == bb.y) {
			if (aa.x >= bb.x)flag = 1;
		}
	}
	return flag;
}

//lt A is less than B
bool lt(uint2 aa, uint2 bb) {
	bool flag = 0;
	if (aa.y < bb.y) {
		flag = 1;
	}
	else {
		if (aa.y == bb.y) {
			if (aa.x < bb.x)flag = 1;
		}
	}
	return flag;
}


uint CreateTable(uint idx) {
	//return (524288 - 3 * 256) / (idx + 256);
	return ConstTable[idx];
}

/* Algorithm 2 from Mﾃｶller and Granlund
   "Improved division by invariant integers". */
uint2 reciprocal_word(uint2 d)
{
	uint2 v4=0, hi = 0, lo = 0, v3 = 0, ehat = 0, v2 = 0, v1 = 0, d40 = 0, d63 = 0;
	uint2 cstmp = 0;
	uint v0 = 0, d0 = 0, d9 = 0;
	d0 = d.x & 1;//[0,2)
	d9 = d.y >> 23;// [256,512)
	cstmp.x = 1; cstmp.y = 0;
	d40 = uladd(u2shr(d, 24), cstmp);// (2^39,2^40]
	cstmp.x = d0; cstmp.y = 0;
	d63 = uladd(u2shr(d, 1), cstmp);// (2^62,2^63]
	v0 = CreateTable(d9 - 256);
	//v0は高々2047
	cstmp.x = v0 * v0; cstmp.y = 0;
	uint2 tmp = u2mymullo128(cstmp, d40);
	v1.y = 0;
	v1.x = (v0 << 11) - 1 - (tmp.y >> 8);

	cstmp.x = 0; cstmp.y = 1 << 28;
	v2 = uladd(u2shl(v1, 13), u2shr(u2mymullo128(v1, ulsub(cstmp, u2mymullo128(v1, d40))), 47));
	ehat.x = 0; ehat.y = 0;
	if (d0)ehat = u2shr(v2, 1);
	ehat = ulsub(ehat, u2mymullo128(v2, d63));
	v3 = uladd(u2shl(v2, 31), u2shr(u2mymulhi128(v2, ehat), 1));
	uint4 out4 = u2mymul128(v3, d);
	hi = out4.zw;
	lo = out4.xy;
	uint3 out3 = uladdofw(lo, d);
	cstmp.x = out3.z; cstmp.y = 0;
	v4 = ulsub(v3, uladd(uladd(hi, d), cstmp));
	return v4;
}

/* Algorithm 4 from Mﾃｶller and Granlund
   "Improved division by invariant integers".
   Divide u1:u0 by d, returning the quotient and storing the remainder in r.
   v is the approximate reciprocal of d, as computed by reciprocal_word. */
   //ulong div2by1(ulong u1ul, ulong u0ul, ulong dul, ulong *r, ulong vul)
uint4 div2by1(uint2 u1, uint2 u0, uint2 d, uint2 v)
{
	uint2 u2r;//=ultou2(*r);
	uint2 q0, q1;
	uint4 out4 = u2mymul128(v, u1);
	uint2 cstmp;
	q1 = out4.zw;
	q0 = out4.xy;

	uint3 out3 = uladdofw(q0, u0);
	q0 = out3.xy;
	cstmp.x = out3.z + 1; cstmp.y = 0;
	q1 = uladd(uladd(q1, u1), cstmp);
	u2r = ulsub(u0, u2mymullo128(q1, d));
	if (gt(u2r, q0)) {
		cstmp.x = 1; cstmp.y = 0;
		q1 = ulsub(q1, cstmp);
		u2r = uladd(u2r, d);
	}
	if (ge(u2r, d)) {
		cstmp.x = 1; cstmp.y = 0;
		q1 = uladd(q1, cstmp);
		u2r = ulsub(u2r, d);
	}

	out4.xy = q1;
	out4.zw = u2r;
	return out4;
}

/* Compute x * y mod n, where n << s is normalized and
   v is the approximate reciprocal of n << s. */
uint2 mulmodn(uint2 x, uint2 y, uint2 n, int s, uint2 v)
{
	uint2 hi, lo;
	uint4 out4 = u2mymul128(x, y);
	lo = out4.xy;
	hi = out4.zw;

	out4 = div2by1(u2shl(hi, s) | u2shr(lo, 64 - s), u2shl(lo, s), u2shl(n, s), v);
	return u2shr(out4.zw, s);
}

/* Compute x^p mod n by means of left-to-right binary exponentiation. */
uint2 powmodn(uint2 x, uint2 p, uint2 n)
{
	uint2 res, v;
	int i, l, s;
	s = clz2(n);
	v = reciprocal_word(u2shl(n, s));
	
	
	
	
	res = x;
	l = 63 - clz2(p);
	i = l - 1;
	for (int ttt = 0; ttt < 64; ttt++) 
	{
		if (i < 0) break;
		res = mulmodn(res, res, n, s, v);
		uint2 tmp = u2shr(p, i);
		if (tmp.x % 2 == 1) {
			res = mulmodn(res, x, n, s, v);
		}
		i--;
	}
	
	return res;
}












//dispatchでは256*1*1でやっているので合計256*256thread
[numthreads(64, 1, 1)]
//メイン計算部分モンゴメリ乗算版64bit、2つのdouble-double(105bit*2)を64bit整数*3にまとめる
//というバージョンをさらに改造してリフレッシュしたやつ
//モンゴメリ乗算、最後の割り算はdiv2by1のソースをネットのからコピペしてやっている
void Sglobal64mtg_192_Refresh(uint idx : SV_DispatchThreadID)
{
	//uint gsize = 4096 *256;
	uint2 k = offset;
	k.x += idx;
	if (k.x < idx)k.y++;
	int revflg;
	revflg = ((numesign + k.x % 2) % 2);
	uint2 dnm = offset_mul_den0;
	uint valtmp = den0 * idx + den1;
	dnm.x += valtmp;
	if (dnm.x < valtmp)dnm.y++;
	uint2 cstmp;
	uint2 dnmadd;
	dnmadd.x = gsize * den0; dnmadd.y = 0;
	uint2 nmr;//分子

	uint2 ulsum0_ = bigSum[idx * 3 + 2];//最上位桁
	uint2 ulsum1_ = bigSum[idx * 3 + 1];//中間
	uint2 ulsum2_ = bigSum[idx * 3 + 0];//最下位桁
	uint up0 = 0, up1 = 0, up2 = 0, up3 = 0, up4 = 0;
	uint2 u[4];
	uint2 q[4];
	
	for (; lt(k, k_max);)
	{
		cstmp.x = 1024; cstmp.y = 0;
		nmr = powmodn(cstmp, ulsub(d,k), dnm);
		//k^-1のところ。答えを適宜反転
		if (revflg==1) {
			nmr = ulsub(dnm, nmr);
		}
		
		u[0] = 0; u[1] = 0; u[2] = 0; u[3] = nmr;
		q[0] = 0; q[1] = 0; q[2] = 0; q[3] = 0;
		/*
				int l = clz2(dnm);
				uint2 d_dmy = u2shl(dnm, l);
				uint2 v = reciprocal_word(d_dmy);
				q[0] = v; q[1] = v; q[2] = 3; q[3] = 0;
		*/
		
		//divnby1(4, u, dnm, q);
		//↑ではコンパイルエラーになるのでインライン展開
		//void divnby1(int n, const uint2* u, uint2 d, uint2* q)
		uint2 v, kk, ui;
		uint4 out4;
		int l, i;
		// Normalize d, storing the shift amount in l. 
		l = clz2(dnm);
		uint2 d_dmy = u2shl(dnm, l);
		// Compute the reciprocal. 
		v = reciprocal_word(d_dmy);
		
		// Perform the division. 
		kk = u2shr(u[4 - 1], 64 - l);
		for (i = 4 - 1; i >= 1; i--) {
			ui = u2shl(u[i], l) | u2shr(u[i - 1], 64 - l);
			out4 = div2by1(kk, ui, d_dmy, v);
			q[i] = out4.xy;
			kk = out4.zw;
		}

		out4 = div2by1(kk, u2shl(u[0], l), d_dmy, v);
		q[0] = out4.xy;
		//ここまで divnby1
		

		ulsum2_ += q[0];
		ulsum1_ += q[1];
		ulsum0_ += q[2];
		up0 += (ulsum2_.x < q[0].x);
		up1 += (ulsum2_.y < q[0].y);
		up2 += (ulsum1_.x < q[1].x);
		up3 += (ulsum1_.y < q[1].y);
		up4 += (ulsum0_.x < q[2].x);//最上位桁

		dnm = uladd(dnm,dnmadd);
		//forに書いていたやつ
		k.x += gsize;
		if (k.x < gsize) k.y++;
	}
	//長いループ終了

	//繰り上がり
	ulsum2_.y += up0;
	up1 += (ulsum2_.y < up0);
	ulsum1_.x += up1;
	up2 += (ulsum1_.x < up1);
	ulsum1_.y += up2;
	up3 += (ulsum1_.y < up2);
	ulsum0_.x += up3;
	up4 += (ulsum0_.x < up3);
	ulsum0_.y += up4;
	
	bigSum[idx * 3 + 0] = ulsum2_;
	bigSum[idx * 3 + 1] = ulsum1_;
	bigSum[idx * 3 + 2] = ulsum0_;
}


[numthreads(64, 1, 1)]
void Zeroset(uint idx : SV_DispatchThreadID)
{
	bigSum[idx * 3 + 0] = 0;
	bigSum[idx * 3 + 1] = 0;
	bigSum[idx * 3 + 2] = 0;
}




//リダクション256→64にまとめ。A→Bに書き込み
[numthreads(64, 1, 1)]
void SumGlobal(uint idx : SV_DispatchThreadID) {
	/*
	uint2 ulsum0_ = A[(idx * 4 + 0) * 3 + 2];//最上位桁
	uint2 ulsum1_ = A[(idx * 4 + 0) * 3 + 1];//中間
	uint2 ulsum2_ = A[(idx * 4 + 0) * 3 + 0];//最下位桁
	uint up0 = 0, up1 = 0, up2 = 0, up3 = 0, up4 = 0;

	uint2 q[3];

	for (int i = 1; i < 4; i++) 
	{
		q[2] = A[(idx * 4 + i) * 3 + 2];//最上位桁
		q[1] = A[(idx * 4 + i) * 3 + 1];//中間
		q[0] = A[(idx * 4 + i) * 3 + 0];//最下位桁
		ulsum2_ += q[0];
		ulsum1_ += q[1];
		ulsum0_ += q[2];
		up0 += (ulsum2_.x < q[0].x);
		up1 += (ulsum2_.y < q[0].y);
		up2 += (ulsum1_.x < q[1].x);
		up3 += (ulsum1_.y < q[1].y);
		up4 += (ulsum0_.x < q[2].x);//最上位桁
	}

	//繰り上がり
	ulsum2_.y += up0;
	up1 += (ulsum2_.y < up0);
	ulsum1_.x += up1;
	up2 += (ulsum1_.x < up1);
	ulsum1_.y += up2;
	up3 += (ulsum1_.y < up2);
	ulsum0_.x += up3;
	up4 += (ulsum0_.x < up3);
	ulsum0_.y += up4;

	B[idx * 3 + 0] = ulsum2_;
	B[idx * 3 + 1] = ulsum1_;
	B[idx * 3 + 2] = ulsum0_;
	*/
}
